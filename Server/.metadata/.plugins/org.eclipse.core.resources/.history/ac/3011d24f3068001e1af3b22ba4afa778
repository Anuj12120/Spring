package com.anuj.blogapp.services.implementation;

import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.anuj.blogapp.entity.Category;
import com.anuj.blogapp.entity.Post;
import com.anuj.blogapp.entity.User;
import com.anuj.blogapp.exceptions.ResourceNotFoundException;
import com.anuj.blogapp.payloads.PostDTO;
import com.anuj.blogapp.repository.CategoryRepo;
import com.anuj.blogapp.repository.PostRepo;
import com.anuj.blogapp.repository.UserRepo;
import com.anuj.blogapp.services.PostService;

@Service
public class PostServiceImplimentation implements PostService {

	@Autowired
	private PostRepo postRepo;
	
	@Autowired
	private ModelMapper modelMapper;
	
	@Autowired
	private UserRepo userRepo;
	
	@Autowired
	private CategoryRepo categoryRepo;
	
	
	
	
	
	@Override
	public PostDTO createPost(PostDTO postdto, Integer userId, Integer categoryId) {
		
		User user = this.userRepo.findById(userId).orElseThrow(()-> new ResourceNotFoundException("User ", "user id", userId));
		Category cat = this.categoryRepo.findById(categoryId).orElseThrow(()-> new ResourceNotFoundException("Category ", "Category id", categoryId));
		
		Post post = this.modelMapper.map(postdto, Post.class);
		post.setImageName("default.png");
		post.setAddedDate(new Date());
		post.setCategory(cat);
		post.setUser(user);
		Post newPost = this.postRepo.save(post);
		
		return this.modelMapper.map(newPost, PostDTO.class);
	}

	@Override
	public Post updatePost(PostDTO postDto) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void deletePost(Integer postId) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public List<Post> getAllPost() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Post getPost(Integer postId) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<PostDTO> getPostByCategory(Integer categoryId) {
		Category cat = this.categoryRepo.findById(categoryId).orElseThrow(()-> new ResourceNotFoundException("Category ", "Category Id", categoryId));
		List<Post> posts = this.postRepo.findByCategory(cat);
		
		
		List<PostDTO> newPost = posts.stream().map((post) -> this.modelMapper.map(post, PostDTO.class)).collect(Collectors.toList());
				
		return newPost;
	}

	@Override
	public List<PostDTO> getPostByUser(Integer userId) {
		User user = this.userRepo.findById(userId).orElseThrow(()-> new ResourceNotFoundException("User ", "User Id", userId));
		List<Post> posts = this.postRepo.findByUser(user);
				
		List<PostDTO> newPost = posts.stream().map((post) -> this.modelMapper.map(post, PostDTO.class)).collect(Collectors.toList());
		
		return newPost;
	}

	@Override
	public List<Post> searchPost(String keyword) {
		// TODO Auto-generated method stub
		return null;
	}

}
